services:
  db:
    image: "postgres:17-alpine"
    restart: always
    networks:
      - rinha-backend
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=rinha
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "50MB"

  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
    networks:
      - rinha-backend
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 30s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.6'
          memory: 200M
    
  app:
    #image: "rinha-bun"
    image: "oven/bun"
    ports:
      #- "3000:3000"
      - "9999:9999"
    entrypoint: []
    #execute bun install before we start the dev server in watch mode -- watch mode don't work with wsl
    #command: "/bin/sh -c 'bun install && bun run --watch index.ts'"
    command: "/bin/sh -c 'bun run --watch index.ts'"
    # setup a host mounted volume to sync changes to the container
    volumes: ["./:/home/bun/app"]
    restart: always
    env_file:
      - .env
    networks:
      - rinha-backend
      - payment-processor
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile

networks:
  rinha-backend:
    driver: bridge
  payment-processor:
    driver: bridge
    external: true

volumes:
  redis_data:
    driver: local
